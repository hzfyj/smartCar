<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\MK66_HDU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\MK66_HDU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sat Jul 14 05:03:33 2018
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; mode3 &rArr; steercontrol &rArr; run &rArr; Motor_PID &rArr; Speed_Fuzzy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[54]">ADC1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from isr.o(i.BusFault_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[57]">CAN0_Bus_Off_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[58]">CAN0_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[56]">CAN0_ORed_Message_buffer_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5a]">CAN0_Rx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[59]">CAN0_Tx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5b]">CAN0_Wake_Up_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6a]">CAN1_Bus_Off_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6b]">CAN1_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[69]">CAN1_ORed_Message_buffer_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6d]">CAN1_Rx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6c]">CAN1_Tx_Warning_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6e]">CAN1_Wake_Up_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[33]">CMP0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[34]">CMP1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[51]">CMP2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[67]">CMP3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[38]">CMT_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[43]">DAC0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[53]">DAC1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[b]">DMA0_IRQHandler</a> from sonyccd.o(i.DMA0_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[15]">DMA10_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[16]">DMA11_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[17]">DMA12_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[18]">DMA13_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[19]">DMA14_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1a]">DMA15_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[c]">DMA1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[d]">DMA2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[e]">DMA3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[f]">DMA4_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[10]">DMA5_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[11]">DMA6_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[12]">DMA7_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[13]">DMA8_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[14]">DMA9_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1b]">DMA_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6f]">DefaultISR</a> from startup_mk66f18.o(.text) referenced 139 times from startup_mk66f18.o(RESET)
 <LI><a href="#[5d]">ENET_1588_Timer_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[60]">ENET_Error_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5f]">ENET_Receive_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5e]">ENET_Transmit_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1d]">FTFE_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[35]">FTM0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[36]">FTM1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[37]">FTM2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[52]">FTM3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from isr.o(i.HardFault_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[23]">I2C0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[24]">I2C1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[55]">I2C2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[66]">I2C3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[28]">I2S0_Rx_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[27]">I2S0_Tx_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[20]">LLWU_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[45]">LPTMR0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[61]">LPUART0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1f]">LVD_LVW_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[44]">MCG_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1c]">MCM_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from isr.o(i.MemManage_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from isr.o(i.NMI_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3f]">PDB0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3b]">PIT0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3c]">PIT1_IRQHandler</a> from isr.o(i.PIT1_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3d]">PIT2_IRQHandler</a> from isr.o(i.PIT2_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3e]">PIT3_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[46]">PORTA_IRQHandler</a> from sonyccd.o(i.PORTA_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[47]">PORTB_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[48]">PORTC_IRQHandler</a> from isr.o(i.PORTC_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[49]">PORTD_IRQHandler</a> from sonyccd.o(i.PORTD_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4a]">PORTE_IRQHandler</a> from isr.o(i.PORTE_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[22]">RNG_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[39]">RTC_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[3a]">RTC_Seconds_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1e]">Read_Collision_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[29]">Reserved46_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[42]">Reserved71_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4f]">Reserved84_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[50]">Reserved85_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[5c]">SDHC_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[25]">SPI0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[26]">SPI1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4c]">SPI2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4b]">SWI_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[71]">Start</a> from system_mk66.o(i.Start) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[63]">TPM1_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[64]">TPM2_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[62]">TSI0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2b]">UART0_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2a]">UART0_RX_TX_IRQHandler</a> from isr.o(i.UART0_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2d]">UART1_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2c]">UART1_RX_TX_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2f]">UART2_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[2e]">UART2_RX_TX_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[31]">UART3_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[30]">UART3_RX_TX_IRQHandler</a> from isr.o(i.UART3_RX_TX_IRQHandler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4e]">UART4_ERR_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[4d]">UART4_RX_TX_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[40]">USB0_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[41]">USBDCD_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[65]">USBHSDCD_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[68]">USBHS_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from isr.o(i.UsageFault_Handler) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[21]">WDOG_EWM_IRQHandler</a> from startup_mk66f18.o(.text) referenced from startup_mk66f18.o(RESET)
 <LI><a href="#[72]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mk66f18.o(.text)
 <LI><a href="#[70]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[73]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[85]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[108]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[109]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[10b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[86]"></a>wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN0_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_Bus_Off_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_ORed_Message_buffer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_Rx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_Tx_Warning_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN1_Wake_Up_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CMP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ENET_1588_Timer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ENET_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>ENET_Receive_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ENET_Transmit_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FTFE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2S0_Rx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S0_Tx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PIT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PORTB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SWI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART4_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_RX_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USBHSDCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mk66f18.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Fuzzy
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[110]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[111]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[112]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[114]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[78]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Center_Scan</STRONG> (Thumb, 664 bytes, Stack size 8 bytes, process.o(i.Center_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Center_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageProcess
</UL>

<P><STRONG><a name="[9e]"></a>Check_Overrun199</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, process.o(i.Check_Overrun199))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[9f]"></a>Check_Overrun69</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, process.o(i.Check_Overrun69))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sonyccd.o(i.DMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMACNT_GetValue</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, dmacnt.o(i.DMACNT_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMACNT_GetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
</UL>

<P><STRONG><a name="[8a]"></a>DMACNT_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dmacnt.o(i.DMACNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DMACNT_Init &rArr; dma_portx2buff_init_new2 &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init_new2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[88]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dmacnt.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
</UL>

<P><STRONG><a name="[8d]"></a>DMA_Init</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, dma_old.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetEnableReq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Data_Uart_Init
</UL>

<P><STRONG><a name="[d8]"></a>DMA_IsComplete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma_old.o(i.DMA_IsComplete))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_to_Computer
</UL>

<P><STRONG><a name="[89]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dmacnt.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
</UL>

<P><STRONG><a name="[8e]"></a>DMA_SetEnableReq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dma_old.o(i.DMA_SetEnableReq))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[de]"></a>Disable_Wdog</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_mk66.o(i.Disable_Wdog))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[8f]"></a>DisplayImage_WithOLED</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, seekfree_mt9v032.o(i.DisplayImage_WithOLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DisplayImage_WithOLED &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageGet_Pixels
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode2
</UL>

<P><STRONG><a name="[ad]"></a>Edge_Scan</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, process.o(i.Edge_Scan))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageProcess
</UL>

<P><STRONG><a name="[93]"></a>FLASH_EraseSector</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FlashCmdStart
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f4]"></a>FLASH_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.FLASH_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f5]"></a>FLASH_ReadByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flash.o(i.FLASH_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[95]"></a>FLASH_WriteSector</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, flash.o(i.FLASH_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_WriteSector &rArr; FlashCmdStart
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashCmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[f8]"></a>FTM_PWM_ChangeDuty</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, ftm.o(i.FTM_PWM_ChangeDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[96]"></a>FTM_port_mux</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ftm.o(i.FTM_port_mux))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_init
</UL>

<P><STRONG><a name="[97]"></a>FieldProcess</STRONG> (Thumb, 40634 bytes, Stack size 72 bytes, process.o(i.FieldProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FieldProcess &rArr; kind &rArr; kjudge &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind_slopecnt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind_huancnt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabss
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fab1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_lineeffect
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overrun69
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overrun199
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalProcess
</UL>

<P><STRONG><a name="[a4]"></a>Get_SendData</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, sd_storage.o(i.Get_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_floattoint32
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_LiveTransfer
</UL>

<P><STRONG><a name="[a0]"></a>Get_lineeffect</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, process.o(i.Get_lineeffect))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IIC_start</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, imu_iic.o(i.IIC_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nops
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_writebyte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>

<P><STRONG><a name="[a8]"></a>IIC_stop</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, imu_iic.o(i.IIC_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nops
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_writebyte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>

<P><STRONG><a name="[a9]"></a>IMU_IIC_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, imu_iic.o(i.IMU_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IMU_IIC_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>ImageGet_Pixels</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, seekfree_mt9v032.o(i.ImageGet_Pixels))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
</UL>

<P><STRONG><a name="[ab]"></a>ImageProcess</STRONG> (Thumb, 9270 bytes, Stack size 4 bytes, process.o(i.ImageProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ImageProcess &rArr; Center_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Edge_Scan
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overrun69
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Overrun199
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Center_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalProcess
</UL>

<P><STRONG><a name="[da]"></a>Image_Init</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, process.o(i.Image_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalProcess
</UL>

<P><STRONG><a name="[ae]"></a>K</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, process.o(i.K))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = K &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
</UL>

<P><STRONG><a name="[af]"></a>KEY_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = KEY_Init &rArr; DMACNT_Init &rArr; dma_portx2buff_init_new2 &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftm_pwm_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>L3G4200D_GetResult</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, l3g4200d.o(i.L3G4200D_GetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = L3G4200D_GetResult &rArr; L3G4200D_readbyte &rArr; send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_XYZ
</UL>

<P><STRONG><a name="[b3]"></a>L3G4200D_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, l3g4200d.o(i.L3G4200D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = L3G4200D_Init &rArr; L3G4200D_writebyte &rArr; send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tly_delay
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_writebyte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>L3G4200D_XYZ</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l3g4200d.o(i.L3G4200D_XYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = L3G4200D_XYZ &rArr; L3G4200D_GetResult &rArr; L3G4200D_readbyte &rArr; send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_GetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
</UL>

<P><STRONG><a name="[b2]"></a>L3G4200D_readbyte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l3g4200d.o(i.L3G4200D_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = L3G4200D_readbyte &rArr; send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_GetResult
</UL>

<P><STRONG><a name="[b5]"></a>L3G4200D_writebyte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, l3g4200d.o(i.L3G4200D_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = L3G4200D_writebyte &rArr; send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_Init
</UL>

<P><STRONG><a name="[e2]"></a>MaxNum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(i.MaxNum))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;racewide
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>MinNum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(i.MinNum))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;racewide
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;door
</UL>

<P><STRONG><a name="[b9]"></a>Motor_PID</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, pidcontrol.o(i.Motor_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Fuzzy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[be]"></a>My_Data_Give</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, sd_storage.o(i.My_Data_Give))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Save
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_LiveTransfer
</UL>

<P><STRONG><a name="[bb]"></a>My_Data_Uart_Init</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, sd_storage.o(i.My_Data_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = My_Data_Uart_Init &rArr; uart_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Tranfer_Init
</UL>

<P><STRONG><a name="[c7]"></a>My_Lines_Pack</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sd_storage.o(i.My_Lines_Pack))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Save
</UL>

<P><STRONG><a name="[c5]"></a>My_Lines_UnPack</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sd_storage.o(i.My_Lines_UnPack))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Read
</UL>

<P><STRONG><a name="[bd]"></a>My_LiveTransfer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd_storage.o(i.My_LiveTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_LiveTransfer &rArr; Get_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_to_Computer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Data_Give
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
</UL>

<P><STRONG><a name="[c0]"></a>My_SdCard_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sd_storage.o(i.My_SdCard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = My_SdCard_Init &rArr; sdhc_initcard_40 &rArr; sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_initcard_40
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ManyWT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
</UL>

<P><STRONG><a name="[c3]"></a>My_SdCard_Read</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sd_storage.o(i.My_SdCard_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = My_SdCard_Read &rArr; sdhc_readblocks &rArr; sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_readblocks
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_to_Computer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Lines_UnPack
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
</UL>

<P><STRONG><a name="[c6]"></a>My_SdCard_Save</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sd_storage.o(i.My_SdCard_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = My_SdCard_Save &rArr; SD_Many_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Many_Write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Lines_Pack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Data_Give
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
</UL>

<P><STRONG><a name="[c9]"></a>My_Tranfer_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd_storage.o(i.My_Tranfer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = My_Tranfer_Init &rArr; My_Data_Uart_Init &rArr; uart_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Data_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
</UL>

<P><STRONG><a name="[a5]"></a>My_floattoint32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sd_storage.o(i.My_floattoint32))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SendData
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>OLED_Clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Clear &rArr; OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>OLED_Delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(i.OLED_Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[cc]"></a>OLED_Init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>OLED_Pin_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled.o(i.OLED_Pin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Pin_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[91]"></a>OLED_Set_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(i.OLED_Set_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[cb]"></a>OLED_WrCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, oled.o(i.OLED_WrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
</UL>

<P><STRONG><a name="[92]"></a>OLED_WrDat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, oled.o(i.OLED_WrDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_WrDat &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>

<P><STRONG><a name="[d0]"></a>OLED_Write_Char</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, oled.o(i.OLED_Write_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_Write_Char &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num4
</UL>

<P><STRONG><a name="[d1]"></a>OLED_Write_Num4</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, oled.o(i.OLED_Write_Num4))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_Write_Num4 &rArr; OLED_Write_Char &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
</UL>

<P><STRONG><a name="[d2]"></a>OLED_Write_String</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oled.o(i.OLED_Write_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_Write_String &rArr; OLED_Write_Char &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>PIT1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.PIT1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PIT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PIT2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PORTA_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sonyccd.o(i.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PORTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.PORTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PORTD_IRQHandler</STRONG> (Thumb, 902 bytes, Stack size 8 bytes, sonyccd.o(i.PORTD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTD_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PORTE_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr.o(i.PORTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORTE_IRQHandler &rArr; VSYNC
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>SD_ManyWT_Init</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, sd_yaoxin.o(i.SD_ManyWT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_ManyWT_Init &rArr; sdhc_sendcommand
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_sendcommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Init
</UL>

<P><STRONG><a name="[c8]"></a>SD_Many_Write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sd_yaoxin.o(i.SD_Many_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Many_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Save
</UL>

<P><STRONG><a name="[d6]"></a>SYSTEM_CLK</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_mk66.o(i.SYSTEM_CLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTEM_CLK
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
</UL>

<P><STRONG><a name="[bf]"></a>Send_to_Computer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sd_storage.o(i.Send_to_Computer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_to_Computer
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IsComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_LiveTransfer
</UL>

<P><STRONG><a name="[d9]"></a>SignalProcess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, process.o(i.SignalProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SignalProcess &rArr; FieldProcess &rArr; kind &rArr; kjudge &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Image_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
</UL>

<P><STRONG><a name="[db]"></a>SonyCCD_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sonyccd.o(i.SonyCCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SonyCCD_Init &rArr; dma_portx2buff_init_new &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init_new
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
</UL>

<P><STRONG><a name="[ba]"></a>Speed_Fuzzy</STRONG> (Thumb, 1462 bytes, Stack size 320 bytes, newfuzzy1.o(i.Speed_Fuzzy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID
</UL>

<P><STRONG><a name="[71]"></a>Start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_mk66.o(i.Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Start &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLK
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Wdog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(i.UART0_RX_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_RX_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.UART3_RX_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART3_RX_TX_IRQHandler &rArr; mt9v032_cof_uart_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v032_cof_uart_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mk66f18.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>VSYNC</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, seekfree_mt9v032.o(i.VSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[119]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[eb]"></a>buzzer_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(i.buzzer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>dajiaochange</STRONG> (Thumb, 300 bytes, Stack size 4 bytes, process.o(i.dajiaochange))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dajiaochange
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabss
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[d7]"></a>div_set</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_mk66.o(i.div_set))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLK
</UL>

<P><STRONG><a name="[dc]"></a>dma_portx2buff_init_new</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, dma.o(i.dma_portx2buff_init_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dma_portx2buff_init_new &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
</UL>

<P><STRONG><a name="[8b]"></a>dma_portx2buff_init_new2</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, dma.o(i.dma_portx2buff_init_new2))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dma_portx2buff_init_new2 &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
</UL>

<P><STRONG><a name="[a2]"></a>door</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, process.o(i.door))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = door
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinNum
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxNum
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[a1]"></a>fab1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, process.o(i.fab1))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[99]"></a>fabss</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(i.fabss))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dajiaochange
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[b0]"></a>ftm_pwm_init</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ftm.o(i.ftm_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ftm_pwm_init &rArr; FTM_port_mux &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_port_mux
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[e3]"></a>get_clk</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, common.o(i.get_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_clk &rArr; uart_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>gpio_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init_new
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_IIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Pin_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[ce]"></a>gpio_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gpio.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>

<P><STRONG><a name="[e4]"></a>huandaopid</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, pidcontrol.o(i.huandaopid))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = huandaopid &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[a3]"></a>kind</STRONG> (Thumb, 1340 bytes, Stack size 16 bytes, process.o(i.kind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = kind &rArr; kjudge &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;racewide
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kjudge
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabss
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[9d]"></a>kind_huancnt</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, process.o(i.kind_huancnt))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[98]"></a>kind_slopecnt</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, process.o(i.kind_slopecnt))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldProcess
</UL>

<P><STRONG><a name="[e6]"></a>kjudge</STRONG> (Thumb, 282 bytes, Stack size 144 bytes, process.o(i.kjudge))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = kjudge &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabss
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
</UL>

<P><STRONG><a name="[e8]"></a>lianwanyou</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, pidcontrol.o(i.lianwanyou))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lianwanyou &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[e9]"></a>lianwanzuo</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, pidcontrol.o(i.lianwanzuo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lianwanzuo &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[ea]"></a>longstraightpid</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, pidcontrol.o(i.longstraightpid))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = longstraightpid &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; mode3 &rArr; steercontrol &rArr; run &rArr; Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clk
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_IIC_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ec]"></a>menu</STRONG> (Thumb, 10930 bytes, Stack size 24 bytes, menu.o(i.menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = menu &rArr; OLED_Write_String &rArr; OLED_Write_Char &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Char
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>mode1</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, menu.o(i.mode1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mode1 &rArr; steercontrol &rArr; run &rArr; Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>mode2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu.o(i.mode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mode2 &rArr; SonyCCD_Init &rArr; dma_portx2buff_init_new &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>mode3</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, menu.o(i.mode3))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mode3 &rArr; steercontrol &rArr; run &rArr; Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Save
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>mode4</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, menu.o(i.mode4))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = mode4 &rArr; My_SdCard_Read &rArr; sdhc_readblocks &rArr; sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Tranfer_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>mode5</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu.o(i.mode5))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mode5 &rArr; SignalProcess &rArr; FieldProcess &rArr; kind &rArr; kjudge &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Tranfer_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_LiveTransfer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayImage_WithOLED
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>mode6</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, menu.o(i.mode6))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mode6 &rArr; OLED_Write_String &rArr; OLED_Write_Char &rArr; OLED_Set_XY &rArr; OLED_WrCmd &rArr; gpio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_String
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Num4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>mt9v032_cof_uart_interrupt</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, seekfree_mt9v032.o(i.mt9v032_cof_uart_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mt9v032_cof_uart_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_RX_TX_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>nops</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, imu_iic.o(i.nops))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_start
</UL>

<P><STRONG><a name="[8c]"></a>port_init</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, port.o(i.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_port_mux
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init_new2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_portx2buff_init_new
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_initgpio
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
</UL>

<P><STRONG><a name="[e5]"></a>protect</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pidcontrol.o(i.protect))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
</UL>

<P><STRONG><a name="[e7]"></a>racewide</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, process.o(i.racewide))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = racewide
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinNum
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxNum
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kind
</UL>

<P><STRONG><a name="[b8]"></a>read_byte</STRONG> (Thumb, 188 bytes, Stack size 4 bytes, imu_iic.o(i.read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nops
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>

<P><STRONG><a name="[fa]"></a>run</STRONG> (Thumb, 5972 bytes, Stack size 48 bytes, process.o(i.run))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = run &rArr; Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_PWM_ChangeDuty
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidzuo
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnpidyou
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightpid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smallspid
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longstraightpid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanzuo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lianwanyou
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huandaopid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dajiaochange
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steercontrol
</UL>

<P><STRONG><a name="[c1]"></a>sdhc_initcard_40</STRONG> (Thumb, 550 bytes, Stack size 64 bytes, sdhc.o(i.sdhc_initcard_40))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sdhc_initcard_40 &rArr; sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Init
</UL>

<P><STRONG><a name="[102]"></a>sdhc_ioc</STRONG> (Thumb, 956 bytes, Stack size 72 bytes, sdhc.o(i.sdhc_ioc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_sendcommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_waitstatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_setbaudrate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_isrunning
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_initgpio
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_readblocks
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_initcard_40
</UL>

<P><STRONG><a name="[c4]"></a>sdhc_readblocks</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, sdhc.o(i.sdhc_readblocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sdhc_readblocks &rArr; sdhc_ioc &rArr; sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_SdCard_Read
</UL>

<P><STRONG><a name="[d5]"></a>sdhc_sendcommand</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, sdhc.o(i.sdhc_sendcommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdhc_sendcommand
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_waitstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ManyWT_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
</UL>

<P><STRONG><a name="[b7]"></a>send_byte</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, imu_iic.o(i.send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nops
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_writebyte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_readbyte
</UL>

<P><STRONG><a name="[fc]"></a>smallspid</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, pidcontrol.o(i.smallspid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smallspid &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[f7]"></a>steercontrol</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, process.o(i.steercontrol))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = steercontrol &rArr; run &rArr; Motor_PID &rArr; Speed_Fuzzy
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACNT_GetValue
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignalProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_XYZ
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
</UL>

<P><STRONG><a name="[fb]"></a>straightpid</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, pidcontrol.o(i.straightpid))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = straightpid &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[106]"></a>systick_delay</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, systick.o(i.systick_delay))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[ed]"></a>systick_delay_ms</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, systick.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode6
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode3
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>tly_delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, l3g4200d.o(i.tly_delay))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L3G4200D_Init
</UL>

<P><STRONG><a name="[fd]"></a>turnpidyou</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, pidcontrol.o(i.turnpidyou))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = turnpidyou &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[fe]"></a>turnpidzuo</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, pidcontrol.o(i.turnpidzuo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = turnpidzuo &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
</UL>

<P><STRONG><a name="[f9]"></a>uart_getchar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(i.uart_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v032_cof_uart_interrupt
</UL>

<P><STRONG><a name="[bc]"></a>uart_init</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_init &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clk
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Tranfer_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_Data_Uart_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[94]"></a>FlashCmdStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, flash.o(i.FlashCmdStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashCmdStart
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteSector
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[ff]"></a>sdhc_init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sdhc.o(i.sdhc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sdhc_init &rArr; sdhc_setbaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_setbaudrate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_initgpio
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
</UL>

<P><STRONG><a name="[100]"></a>sdhc_initgpio</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sdhc.o(i.sdhc_initgpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdhc_initgpio &rArr; port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_init
</UL>

<P><STRONG><a name="[103]"></a>sdhc_isrunning</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdhc.o(i.sdhc_isrunning))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
</UL>

<P><STRONG><a name="[105]"></a>sdhc_read</STRONG> (Thumb, 266 bytes, Stack size 12 bytes, sdhc.o(i.sdhc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdhc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_readblocks
</UL>

<P><STRONG><a name="[101]"></a>sdhc_setbaudrate</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, sdhc.o(i.sdhc_setbaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdhc_setbaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_init
</UL>

<P><STRONG><a name="[104]"></a>sdhc_waitstatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdhc.o(i.sdhc_waitstatus))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_sendcommand
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdhc_ioc
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sonyccd.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SonyCCD_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
